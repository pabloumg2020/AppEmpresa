@page "/v_estudiante"
@using AppColegio.Data
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<h1>Formulario de Estudiantes</h1>

@if (getEstudianteError || iestudiantes is null)
{
    <p>No se encontro la API.</p>
}
else
{
    <form>
        <label for="lbl_nombres" class="form-label">Nombres</label>
        <input @bind="var_nombres" type="text" class="form-control" placeholder="Ejemplo: Nombre 1 Nombre 2">
        <label for="lbl_apellidos" class="form-label">Apellidos</label>
        <input @bind="var_apellidos" type="text" class="form-control" placeholder="Ejemplo: Apellido 1 Apellido 2">
        <label for="lbl_direccion" class="form-label">Direccion</label>
        <input @bind="var_direccion" type="text" class="form-control" placeholder="Ejemplo: # casa calle avenida lugar">
        <label for="lbl_telefono" class="form-label">Telefono</label>
        <input @bind="var_telefono" type="text" class="form-control" placeholder="Ejemplo: 54546767">
        <label for="lbl_fn" class="form-label">Fecha Nacimiento</label>
        <input @bind="var_fn" type="date" class="form-control" placeholder="yyyy-mm-dd">
        <br>
        <button type="button" @onclick="Crear" class="btn btn-info">Crear</button>
        <button type="button" @onclick="Actualizar" class="btn btn-success">Modificar</button>
        <button type="button" @onclick="Eliminar" class="btn btn-danger">Eliminar</button>
    </form>

    <table class="table">
        <tbody>
            <tr>
                <th></th>
                <th>Nombres</th>
                <th>Apellidos</th>
                <th>Direccion</th>
                <th>Telefono</th>
                <th>Fecha Nacimiento</th>
            </tr>
        </tbody>
        @foreach (var estudiante in iestudiantes)
        {
            <tr>
            <td><button type="button" @onclick = "(() => enviarParametros(estudiante.Id_estudiantes,estudiante.Nombres,estudiante.Apellidos,estudiante.Direccion,estudiante.Telefono,estudiante.Fecha_nacimiento))" class="btn btn-info"><i class="oi oi-pencil"></i></button></td>
            <td>@estudiante.Nombres</td>
            <td>@estudiante.Apellidos</td>
            <td>@estudiante.Direccion</td>
            <td>@estudiante.Telefono</td>
            <td>@estudiante.Fecha_nacimiento</td>
            </tr>
        }
    </table>
}

@code {
    private string? url = "https://localhost:7039/api/Estudiantes";
    private Int32? var_idestudiante;
    private string? var_nombres, var_apellidos, var_direccion, var_telefono;
    private DateTime? var_fn;
    // Enviar parametros a variables locales
    void enviarParametros(Int32? id, string? nom,string? ape,string? dir,string? tel, DateTime? f){
        var_idestudiante = id;
        var_nombres = nom;
        var_apellidos = ape;
        var_direccion = dir;
        var_telefono = tel;
        var_fn = f;
    }
    // Crear
    private async Task Crear()
    {
        var client = ClientFactory.CreateClient();
        var addItem = new Cliente {Nombres=var_nombres,Apellidos=var_apellidos,Direccion=var_direccion,Telefono=var_telefono,Fecha_nacimiento=var_fn};
        await client.PostAsJsonAsync(url, addItem);
        await OnInitializedAsync();
    }
    // Actualizar
    private async Task Actualizar()
    {
        var client = ClientFactory.CreateClient();
        var addItem = new Estudiante { Id_estudiantes=var_idestudiante,Nombres=var_nombres,Apellidos=var_apellidos,Direccion=var_direccion,Telefono=var_telefono,Fecha_nacimiento=var_fn};
        await client.PutAsJsonAsync($"{url}/{var_idestudiante}", addItem);
        await OnInitializedAsync();
    }
    // Eliminar
    private async Task Eliminar()
    {
        var client = ClientFactory.CreateClient();
        await client.DeleteAsync($"{url}/{var_idestudiante}");
        await OnInitializedAsync();
    }
    private IEnumerable<Estudiante>? iestudiantes = Array.Empty<Estudiante>();
    private bool getClienteError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            url);
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            iestudiantes = await JsonSerializer.DeserializeAsync
                <IEnumerable<Estudiante>>(responseStream);
        }
        else
        {
            getEstudianteError = true;
        }

        shouldRender = true;
    }

    
}